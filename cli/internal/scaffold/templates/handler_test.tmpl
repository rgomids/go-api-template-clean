package http

import (
    "bytes"
    "context"
    "net/http"
    "net/http/httptest"
    "testing"

    "github.com/go-chi/chi/v5"
    "{{ .ImportPath }}/internal/domain/entity"
    testutil "github.com/rgomids/go-api-template-clean/pkg/testing"
)


func Test{{ .EntityName }}Handler_Create(t *testing.T) {
    h := New{{ .EntityName }}Handler(&testutil.CRUDStubService[entity.{{ .EntityName }}]{})
    req := httptest.NewRequest(http.MethodPost, "/", bytes.NewBufferString(`{}`))
    rr := httptest.NewRecorder()
    h.Create(rr, req)
    if rr.Code != http.StatusCreated {
        t.Fatalf("expected 201, got %d", rr.Code)
    }
}

func Test{{ .EntityName }}Handler_List(t *testing.T) {
    h := New{{ .EntityName }}Handler(&testutil.CRUDStubService[entity.{{ .EntityName }}]{})
    req := httptest.NewRequest(http.MethodGet, "/?name=x", nil)
    rr := httptest.NewRecorder()
    h.List(rr, req)
    if rr.Code != http.StatusOK {
        t.Fatalf("expected 200, got %d", rr.Code)
    }
}

func Test{{ .EntityName }}Handler_GetByID(t *testing.T) {
    h := New{{ .EntityName }}Handler(&testutil.CRUDStubService[entity.{{ .EntityName }}]{})
    req := httptest.NewRequest(http.MethodGet, "/1", nil)
    ctx := chi.NewRouteContext()
    ctx.URLParams.Add("id", "1")
    req = req.WithContext(context.WithValue(req.Context(), chi.RouteCtxKey, ctx))
    rr := httptest.NewRecorder()
    h.GetByID(rr, req)
    if rr.Code != http.StatusOK {
        t.Fatalf("expected 200, got %d", rr.Code)
    }
}

func Test{{ .EntityName }}Handler_Update(t *testing.T) {
    h := New{{ .EntityName }}Handler(&testutil.CRUDStubService[entity.{{ .EntityName }}]{})
    req := httptest.NewRequest(http.MethodPut, "/1", bytes.NewBufferString(`{}`))
    ctx := chi.NewRouteContext()
    ctx.URLParams.Add("id", "1")
    req = req.WithContext(context.WithValue(req.Context(), chi.RouteCtxKey, ctx))
    rr := httptest.NewRecorder()
    h.Update(rr, req)
    if rr.Code != http.StatusNoContent {
        t.Fatalf("expected 204, got %d", rr.Code)
    }
}

func Test{{ .EntityName }}Handler_Delete(t *testing.T) {
    h := New{{ .EntityName }}Handler(&testutil.CRUDStubService[entity.{{ .EntityName }}]{})
    req := httptest.NewRequest(http.MethodDelete, "/1", nil)
    ctx := chi.NewRouteContext()
    ctx.URLParams.Add("id", "1")
    req = req.WithContext(context.WithValue(req.Context(), chi.RouteCtxKey, ctx))
    rr := httptest.NewRecorder()
    h.Delete(rr, req)
    if rr.Code != http.StatusNoContent {
        t.Fatalf("expected 204, got %d", rr.Code)
    }
}
