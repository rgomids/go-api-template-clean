package http

import (
    "encoding/json"
    "net/http"

    "github.com/go-chi/chi/v5"
    "{{ .ImportPath }}/internal/domain/entity"
    "{{ .ImportPath }}/internal/domain/service"
)

type {{ .EntityName }}Handler struct {
    service service.{{ .EntityName }}Service
}

func New{{ .EntityName }}Handler(s service.{{ .EntityName }}Service) *{{ .EntityName }}Handler {
    return &{{ .EntityName }}Handler{service: s}
}

func (h *{{ .EntityName }}Handler) Create(w http.ResponseWriter, r *http.Request) {
    var e entity.{{ .EntityName }}
    if err := json.NewDecoder(r.Body).Decode(&e); err != nil {
        writeError(w, http.StatusBadRequest, "invalid body")
        return
    }
    if err := h.service.Create(&e); err != nil {
        writeError(w, http.StatusInternalServerError, err.Error())
        return
    }
    writeJSON(w, http.StatusCreated, e)
}

func (h *{{ .EntityName }}Handler) GetByID(w http.ResponseWriter, r *http.Request) {
    id := chi.URLParam(r, "id")
    e, err := h.service.GetByID(id)
    if err != nil {
        writeError(w, http.StatusInternalServerError, err.Error())
        return
    }
    writeJSON(w, http.StatusOK, e)
}

func (h *{{ .EntityName }}Handler) List(w http.ResponseWriter, r *http.Request) {
    filters := map[string]interface{}{}
    for k, v := range r.URL.Query() {
        filters[k] = v[0]
    }
    list, err := h.service.List(filters)
    if err != nil {
        writeError(w, http.StatusInternalServerError, err.Error())
        return
    }
    writeJSON(w, http.StatusOK, list)
}

func (h *{{ .EntityName }}Handler) Update(w http.ResponseWriter, r *http.Request) {
    id := chi.URLParam(r, "id")
    var e entity.{{ .EntityName }}
    if err := json.NewDecoder(r.Body).Decode(&e); err != nil {
        writeError(w, http.StatusBadRequest, "invalid body")
        return
    }
    if err := h.service.Update(id, &e); err != nil {
        writeError(w, http.StatusInternalServerError, err.Error())
        return
    }
    w.WriteHeader(http.StatusNoContent)
}

func (h *{{ .EntityName }}Handler) Delete(w http.ResponseWriter, r *http.Request) {
    id := chi.URLParam(r, "id")
    if err := h.service.Delete(id); err != nil {
        writeError(w, http.StatusInternalServerError, err.Error())
        return
    }
    w.WriteHeader(http.StatusNoContent)
}
