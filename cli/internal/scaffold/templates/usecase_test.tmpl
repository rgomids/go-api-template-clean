package usecase

import (
    "errors"
    "testing"
    "time"

    "{{ .ImportPath }}/internal/domain/entity"
)

type fakeRepo struct {
    saveFn   func(*entity.{{ .EntityName }}) error
    updateFn func(string, *entity.{{ .EntityName }}) error
    findFn   func(string) (*entity.{{ .EntityName }}, error)
    listFn   func(map[string]interface{}) ([]*entity.{{ .EntityName }}, error)
    deleteFn func(string) error
}

func (f *fakeRepo) Save(e *entity.{{ .EntityName }}) error { if f.saveFn != nil { return f.saveFn(e) }; return nil }
func (f *fakeRepo) Update(id string, e *entity.{{ .EntityName }}) error { if f.updateFn != nil { return f.updateFn(id, e) }; return nil }
func (f *fakeRepo) FindByID(id string) (*entity.{{ .EntityName }}, error) { if f.findFn != nil { return f.findFn(id) }; return &entity.{{ .EntityName }}{}, nil }
func (f *fakeRepo) List(fm map[string]interface{}) ([]*entity.{{ .EntityName }}, error) { if f.listFn != nil { return f.listFn(fm) }; return []*entity.{{ .EntityName }}{}, nil }
func (f *fakeRepo) Delete(id string) error { if f.deleteFn != nil { return f.deleteFn(id) }; return nil }

func Test{{ .EntityName }}UseCase_Create(t *testing.T) {
    repo := &fakeRepo{}
    uc := New{{ .EntityName }}UseCase(repo)
    e := &entity.{{ .EntityName }}{}
    if err := uc.Create(e); err != nil {
        t.Fatalf("unexpected error: %v", err)
    }
    if e.ID == "" || time.Since(e.CreatedAt) > time.Second {
        t.Fatalf("fields not set")
    }
}

func Test{{ .EntityName }}UseCase_RepoError(t *testing.T) {
    repo := &fakeRepo{saveFn: func(*entity.{{ .EntityName }}) error { return errors.New("fail") }}
    uc := New{{ .EntityName }}UseCase(repo)
    if err := uc.Create(&entity.{{ .EntityName }}{}); err == nil {
        t.Fatal("expected error")
    }
}
