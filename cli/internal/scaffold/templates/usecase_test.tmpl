package usecase_test

import (
    "errors"
    "testing"

    "{{ .ImportPath }}/internal/domain/entity"
    "{{ .ImportPath }}/internal/domain/usecase"
)

type fakeRepo struct {
    saveFn func(*entity.{{ .EntityName }}) error
}

func (f *fakeRepo) Save(e *entity.{{ .EntityName }}) error {
    return f.saveFn(e)
}

func Test{{ .EntityName }}UseCase_Create(t *testing.T) {
    t.Run("success", func(t *testing.T) {
        repo := &fakeRepo{saveFn: func(e *entity.{{ .EntityName }}) error { return nil }}
        uc := usecase.New{{ .EntityName }}UseCase(repo)

        err := uc.Create(&entity.{{ .EntityName }}{})
        if err != nil {
            t.Errorf("expected nil, got %v", err)
        }
    })

    t.Run("failure", func(t *testing.T) {
        repo := &fakeRepo{saveFn: func(e *entity.{{ .EntityName }}) error {
            return errors.New("fail")
        }}
        uc := usecase.New{{ .EntityName }}UseCase(repo)

        err := uc.Create(&entity.{{ .EntityName }}{})
        if err == nil {
            t.Errorf("expected error, got nil")
        }
    })
}
